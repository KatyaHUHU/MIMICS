#!/usr/bin/env python3
"""
MIMICS Launcher - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ª–∞—É–Ω—á–µ—Ä –¥–ª—è Windows
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞, –∑–∞–ø—É—Å–∫, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏–º–∏—Ç–∞—Ü–∏–∏ –¥–∞—Ç—á–∏–∫–æ–≤
"""

import os
import sys
import subprocess
import time
import webbrowser
import signal
import argparse
from pathlib import Path

class Colors:
    """ANSI —Ü–≤–µ—Ç–∞ –¥–ª—è Windows –∫–æ–Ω—Å–æ–ª–∏"""
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    BOLD = '\033[1m'
    END = '\033[0m'

class MimicsLauncher:
    def __init__(self):
        self.root_dir = Path(__file__).parent.absolute()
        self.backend_process = None
        self.frontend_process = None
        
        # –í–∫–ª—é—á–∞–µ–º ANSI —Ü–≤–µ—Ç–∞ –¥–ª—è Windows
        os.system('color')
        
    def print_banner(self):
        """–ö—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        banner = f"""
{Colors.PURPLE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üéØ MIMICS LAUNCHER                    ‚ïë
‚ïë              –°–∏—Å—Ç–µ–º–∞ –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –¥–∞—Ç—á–∏–∫–æ–≤            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù{Colors.END}
"""
        print(banner)
        
    def check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print(f"{Colors.BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...{Colors.END}")
        
        deps = {
            'docker': {
                'cmd': ['docker', '--version'],
                'error': 'Docker Desktop –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n   –°–∫–∞—á–∞–π—Ç–µ: https://www.docker.com/products/docker-desktop'
            },
            'python': {
                'cmd': [sys.executable, '--version'],
                'error': 'Python –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏–∑ Python - —Å—Ç—Ä–∞–Ω–Ω–æ...)'
            },
            'node': {
                'cmd': ['node', '--version'],
                'error': 'Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n   –°–∫–∞—á–∞–π—Ç–µ: https://nodejs.org/en/download/'
            }
        }
        
        all_ok = True
        for name, info in deps.items():
            try:
                result = subprocess.run(
                    info['cmd'], 
                    stdout=subprocess.PIPE, 
                    stderr=subprocess.PIPE, 
                    check=True,
                    text=True
                )
                version = result.stdout.strip().split('\n')[0]
                print(f"{Colors.GREEN}‚úÖ {name}: {version}{Colors.END}")
            except (subprocess.CalledProcessError, FileNotFoundError):
                print(f"{Colors.RED}‚ùå {info['error']}{Colors.END}")
                all_ok = False
                
        return all_ok
    
    def kill_processes_on_ports(self):
        """–£–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç–∞—Ö –ë–ï–ó —É–±–∏–π—Å—Ç–≤–∞ —Å–∞–º–æ–≥–æ launcher"""
        print(f"{Colors.CYAN}üîÑ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Ä—Ç–æ–≤ –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...{Colors.END}")
        
        # –ü–æ–ª—É—á–∞–µ–º PID —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ (launcher)
        current_pid = str(os.getpid())
        
        # –£–±–∏—Ç—å —Ç–æ–ª—å–∫–æ uvicorn –ø—Ä–æ—Ü–µ—Å—Å—ã (–Ω–µ –≤–µ—Å—å python.exe)
        try:
            result = subprocess.run(['wmic', 'process', 'get', 'processid,commandline'], 
                                capture_output=True, text=True)
            for line in result.stdout.split('\n'):
                if 'uvicorn' in line and 'main:app' in line:
                    parts = line.strip().split()
                    if parts:
                        pid = parts[-1]
                        if pid != current_pid:  # –ù–µ —É–±–∏–≤–∞–µ–º —Å–∞–º launcher
                            subprocess.run(['taskkill', '/F', '/PID', pid], 
                                        stderr=subprocess.DEVNULL, check=False)
        except:
            pass
        
        # –£–±–∏—Ç—å Node.js –ø—Ä–æ—Ü–µ—Å—Å—ã
        try:
            subprocess.run(['taskkill', '/f', '/im', 'node.exe'], 
                        stderr=subprocess.DEVNULL, check=False)
        except:
            pass
        
        # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Ä—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
        ports = [3000, 8000]
        for port in ports:
            try:
                result = subprocess.run(['netstat', '-ano'], capture_output=True, text=True)
                for line in result.stdout.split('\n'):
                    if f':{port}' in line and 'LISTENING' in line:
                        pid = line.strip().split()[-1]
                        if pid != current_pid:  # –ù–µ —É–±–∏–≤–∞–µ–º —Å–∞–º launcher
                            subprocess.run(['taskkill', '/F', '/PID', pid], 
                                        stderr=subprocess.DEVNULL, check=False)
            except:
                pass
        
        time.sleep(1)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞
    
    def install_dependencies(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print(f"\n{Colors.YELLOW}üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...{Colors.END}")
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            print(f"{Colors.CYAN}üêç –°–æ–∑–¥–∞–Ω–∏–µ Python –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...{Colors.END}")
            venv_path = self.root_dir / 'venv'
            if not venv_path.exists():
                subprocess.run([sys.executable, '-m', 'venv', 'venv'], 
                            cwd=self.root_dir, check=True)
            
            # –ü—É—Ç–∏ –¥–ª—è Windows
            pip_path = venv_path / 'Scripts' / 'pip.exe'
            python_path = venv_path / 'Scripts' / 'python.exe'
            
            print(f"{Colors.CYAN}üìã –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...{Colors.END}")
            subprocess.run([str(pip_path), 'install', '-r', 'requirements.txt'], 
                        cwd=self.root_dir, check=True)
            
            # Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ß–ê–°–¢–¨
            print(f"{Colors.CYAN}üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...{Colors.END}")
            sensor_app_path = self.root_dir / 'sensor-app'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
            if not sensor_app_path.exists():
                raise FileNotFoundError(f"–ü–∞–ø–∫–∞ {sensor_app_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º npm.cmd –¥–ª—è Windows –∏ shell=True
            try:
                # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ npm.cmd
                subprocess.run(['npm.cmd', 'install'], 
                            cwd=sensor_app_path, 
                            check=True, 
                            shell=True,
                            timeout=300)  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            except (subprocess.CalledProcessError, FileNotFoundError):
                # –ï—Å–ª–∏ npm.cmd –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º npm —Å shell=True
                print(f"{Colors.YELLOW}‚ö†Ô∏è npm.cmd –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º npm...{Colors.END}")
                subprocess.run(['npm', 'install'], 
                            cwd=sensor_app_path, 
                            check=True, 
                            shell=True,
                            timeout=300)
            
            # –ó–∞–ø—É—Å–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            print(f"{Colors.CYAN}üóÑÔ∏è –ó–∞–ø—É—Å–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL...{Colors.END}")
            subprocess.run(['docker-compose', 'up', '-d'], cwd=self.root_dir, check=True)
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ë–î
            print(f"{Colors.YELLOW}‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (15 —Å–µ–∫)...{Colors.END}")
            time.sleep(15)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
            print(f"{Colors.CYAN}üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...{Colors.END}")
            subprocess.run([str(python_path), 'db_init.py'], 
                        cwd=self.root_dir, check=True)
            
            print(f"{Colors.GREEN}‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!{Colors.END}")
            return True
            
        except subprocess.TimeoutExpired:
            print(f"{Colors.RED}‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π{Colors.END}")
            print(f"{Colors.YELLOW}üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å 'npm install' –≤—Ä—É—á–Ω—É—é –≤ –ø–∞–ø–∫–µ sensor-app{Colors.END}")
            return False
        except FileNotFoundError as e:
            print(f"{Colors.RED}‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}{Colors.END}")
            print(f"{Colors.YELLOW}üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ PATH{Colors.END}")
            return False
        except subprocess.CalledProcessError as e:
            print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}{Colors.END}")
            print(f"{Colors.YELLOW}üí° –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {e.stderr if hasattr(e, 'stderr') else '–ù–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π'}{Colors.END}")
            return False
        except Exception as e:
            print(f"{Colors.RED}‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}{Colors.END}")
            print(f"{Colors.YELLOW}üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞{Colors.END}")
            return False
    
    def check_database_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        venv_path = self.root_dir / 'venv'
        python_path = venv_path / 'Scripts' / 'python.exe'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        check_script = """
import sys
sys.path.append('.')
try:
    from db.config import engine
    engine.connect().close()
    print("Database connection OK")
    sys.exit(0)
except Exception as e:
    print(f"Database connection failed: {e}")
    sys.exit(1)
"""
        
        try:
            result = subprocess.run(
                [str(python_path), '-c', check_script],
                cwd=self.root_dir,
                capture_output=True,
                text=True,
                timeout=10
            )
            
            if result.returncode == 0:
                print(f"{Colors.GREEN}‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞{Colors.END}")
                return True
            else:
                print(f"{Colors.RED}‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {result.stdout}{Colors.END}")
                return False
        except Exception as e:
            print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}{Colors.END}")
            return False
    
    def start_application(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print(f"\n{Colors.BLUE}üöÄ –ó–∞–ø—É—Å–∫ MIMICS...{Colors.END}")
        
        # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        self.kill_processes_on_ports()
        
        try:
            # –ó–∞–ø—É—Å–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            print(f"{Colors.CYAN}üóÑÔ∏è –ó–∞–ø—É—Å–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL...{Colors.END}")
            subprocess.run(['docker-compose', 'up', '-d'], cwd=self.root_dir)
            
            # –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –ë–î
            print(f"{Colors.YELLOW}‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...{Colors.END}")
            for i in range(30):  # –î–æ 30 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è
                time.sleep(1)
                if self.check_database_health():
                    break
                if i % 5 == 0:
                    print(f"{Colors.YELLOW}   –û–∂–∏–¥–∞–Ω–∏–µ... ({i} —Å–µ–∫){Colors.END}")
            
            # –ü—É—Ç–∏ –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è Windows
            venv_path = self.root_dir / 'venv'
            python_path = venv_path / 'Scripts' / 'python.exe'
            
            # –í—Å–µ–≥–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            print(f"{Colors.CYAN}üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...{Colors.END}")
            result = subprocess.run([str(python_path), 'db_init.py'], 
                                  cwd=self.root_dir, 
                                  capture_output=True,
                                  text=True)
            if result.returncode != 0:
                print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {result.stderr}{Colors.END}")
                return False
            
            # –ó–∞–ø—É—Å–∫ backend —Å –í–ò–î–ò–ú–´–ú–ò –ª–æ–≥–∞–º–∏
            print(f"{Colors.CYAN}üîß –ó–∞–ø—É—Å–∫ Backend API (–ø–æ—Ä—Ç 8000)...{Colors.END}")
            print(f"{Colors.YELLOW}üìù –õ–æ–≥–∏ backend –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∏–∂–µ:{Colors.END}")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Å–æ–ª—å –¥–ª—è backend —Å –≤–∏–¥–∏–º—ã–º–∏ –ª–æ–≥–∞–º–∏
            self.backend_process = subprocess.Popen([
                str(python_path), '-m', 'uvicorn', 'api.main:app', 
                '--reload', '--host', '0.0.0.0', '--port', '8000',
                '--log-level', 'info'
            ], cwd=self.root_dir,
               creationflags=subprocess.CREATE_NEW_CONSOLE)
            
            # –ü–∞—É–∑–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ API
            print(f"{Colors.YELLOW}‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Backend API...{Colors.END}")
            time.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
            try:
                import urllib.request
                response = urllib.request.urlopen('http://localhost:8000/')
                if response.getcode() == 200:
                    print(f"{Colors.GREEN}‚úÖ Backend API –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω{Colors.END}")
            except Exception as e:
                print(f"{Colors.YELLOW}‚ö†Ô∏è Backend API –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}{Colors.END}")
            
            # –ó–∞–ø—É—Å–∫ frontend –ë–ï–ó –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏
            print(f"{Colors.CYAN}üé® –ó–∞–ø—É—Å–∫ Frontend React (–ø–æ—Ä—Ç 3000)...{Colors.END}")
            sensor_app_path = self.root_dir / 'sensor-app'
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è —á—Ç–æ–±—ã React –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–ª—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            env = os.environ.copy()
            env['BROWSER'] = 'none'
            
            self.frontend_process = subprocess.Popen(
                'npm.cmd start', 
                cwd=sensor_app_path,
                shell=True,
                stdout=subprocess.DEVNULL, 
                stderr=subprocess.DEVNULL,
                env=env
            )
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            print(f"{Colors.YELLOW}‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...{Colors.END}")
            time.sleep(10)
            
            # –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫
            success_msg = f"""
{Colors.GREEN}‚úÖ MIMICS —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!{Colors.END}

{Colors.BOLD}üåê –°—Å—ã–ª–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:{Colors.END}
   Frontend:     http://localhost:3000
   Backend API:  http://localhost:8000
   API Docs:     http://localhost:8000/docs

{Colors.YELLOW}üìù Backend –ª–æ–≥–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ –∫–æ–Ω—Å–æ–ª–∏{Colors.END}

{Colors.BLUE}üîó –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ...{Colors.END}
"""
            print(success_msg)
            
            # –û—Ç–∫—Ä—ã—Ç–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            webbrowser.open('http://localhost:3000')
            
            return True
            
        except Exception as e:
            print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}{Colors.END}")
            import traceback
            traceback.print_exc()
            return False
    
    def wait_for_exit(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        try:
            print(f"\n{Colors.YELLOW}‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ Ctrl+C{Colors.END}")
            print(f"{Colors.CYAN}üìä –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...{Colors.END}")
            
            # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
            while True:
                time.sleep(1)
                
        except KeyboardInterrupt:
            self.stop_application()
    
    def stop_application(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print(f"\n{Colors.YELLOW}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ MIMICS...{Colors.END}")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        if self.backend_process:
            print(f"{Colors.CYAN}üîß –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Backend...{Colors.END}")
            self.backend_process.terminate()
            try:
                self.backend_process.wait(timeout=3)
            except subprocess.TimeoutExpired:
                self.backend_process.kill()
        
        if self.frontend_process:
            print(f"{Colors.CYAN}üé® –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Frontend...{Colors.END}")
            self.frontend_process.terminate()
            try:
                self.frontend_process.wait(timeout=3)
            except subprocess.TimeoutExpired:
                self.frontend_process.kill()
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Ä—Ç–æ–≤ –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        self.kill_processes_on_ports()
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        print(f"{Colors.CYAN}üóÑÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...{Colors.END}")
        try:
            subprocess.run(['docker-compose', 'stop'], cwd=self.root_dir, 
                         timeout=10, check=False)
        except subprocess.TimeoutExpired:
            pass
        
        print(f"{Colors.GREEN}‚úÖ MIMICS –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω{Colors.END}")
    
    def clean_system(self):
        """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        print(f"{Colors.YELLOW}üßπ –û–ß–ò–°–¢–ö–ê –°–ò–°–¢–ï–ú–´ MIMICS{Colors.END}")
        print()
        print(f"{Colors.RED}‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!{Colors.END}")
        print()
        print("–ß—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:")
        print("- –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ Python (venv/)")
        print("- Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (sensor-app/node_modules/)")
        print("- Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –¥–∞–Ω–Ω—ã–µ")
        print("- –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        print()
        
        confirm = input(f"{Colors.YELLOW}–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—á–∏—Å—Ç–∫—É? (y/N): {Colors.END}")
        if confirm.lower() != 'y':
            print("–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        
        print(f"\n{Colors.BLUE}–ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É...{Colors.END}")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        print(f"{Colors.CYAN}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...{Colors.END}")
        self.stop_application()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Windows
        try:
            subprocess.run(['taskkill', '/f', '/im', 'python.exe'], 
                         stderr=subprocess.DEVNULL, check=False)
            subprocess.run(['taskkill', '/f', '/im', 'node.exe'], 
                         stderr=subprocess.DEVNULL, check=False)
            subprocess.run(['taskkill', '/f', '/im', 'uvicorn.exe'], 
                         stderr=subprocess.DEVNULL, check=False)
        except:
            pass
        
        # –£–¥–∞–ª–µ–Ω–∏–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö
        print(f"{Colors.CYAN}üê≥ –£–¥–∞–ª–µ–Ω–∏–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö...{Colors.END}")
        try:
            subprocess.run(['docker-compose', 'down', '-v'], cwd=self.root_dir, 
                         stderr=subprocess.DEVNULL, check=False)
            subprocess.run(['docker', 'system', 'prune', '-f'], 
                         stderr=subprocess.DEVNULL, check=False)
        except:
            pass
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è Python
        print(f"{Colors.CYAN}üêç –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è Python...{Colors.END}")
        venv_path = self.root_dir / 'venv'
        if venv_path.exists():
            try:
                import shutil
                shutil.rmtree(venv_path)
                print(f"    {Colors.GREEN}‚úÖ venv —É–¥–∞–ª–µ–Ω{Colors.END}")
            except Exception as e:
                print(f"    {Colors.YELLOW}‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å venv: {e}{Colors.END}")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        print(f"{Colors.CYAN}üì¶ –£–¥–∞–ª–µ–Ω–∏–µ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...{Colors.END}")
        node_modules_path = self.root_dir / 'sensor-app' / 'node_modules'
        if node_modules_path.exists():
            try:
                import shutil
                shutil.rmtree(node_modules_path)
                print(f"    {Colors.GREEN}‚úÖ node_modules —É–¥–∞–ª–µ–Ω{Colors.END}")
            except Exception as e:
                print(f"    {Colors.YELLOW}‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å node_modules: {e}{Colors.END}")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        print(f"{Colors.CYAN}üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...{Colors.END}")
        temp_patterns = ['*.log', '*.tmp', '__pycache__']
        for pattern in temp_patterns:
            try:
                import glob
                for file in glob.glob(str(self.root_dir / '**' / pattern), recursive=True):
                    os.remove(file)
            except:
                pass
        
        print(f"\n{Colors.GREEN}‚úÖ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê{Colors.END}")
        print(f"–°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞")
        print(f"–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: {Colors.BOLD}python launcher.py{Colors.END}")
        print()
    
    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = f"""
{Colors.BOLD}MIMICS Launcher - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ª–∞—É–Ω—á–µ—Ä –¥–ª—è Windows{Colors.END}

{Colors.YELLOW}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:{Colors.END}
  python launcher.py              # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  python launcher.py --clean      # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã
  python launcher.py --help       # –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

{Colors.YELLOW}–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤:{Colors.END}
  {Colors.GREEN}–û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫{Colors.END}  - –ü—Ä–æ–≤–µ—Ä–∏—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏,
                      –∑–∞–ø—É—Å—Ç–∏—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –æ—Ç–∫—Ä–æ–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ
  
  {Colors.RED}–û—á–∏—Å—Ç–∫–∞{Colors.END}        - –£–¥–∞–ª–∏—Ç –≤—Å–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –¥–∞–Ω–Ω—ã–µ
                      –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö.

{Colors.YELLOW}–ü—Ä–∏–º–µ—Ä—ã:{Colors.END}
  python launcher.py              # –ó–∞–ø—É—Å—Ç–∏—Ç—å MIMICS
  python launcher.py --clean      # –û—á–∏—Å—Ç–∏—Ç—å –∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å

{Colors.YELLOW}–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:{Colors.END}
  - Docker Desktop –¥–ª—è Windows
  - Python 3.9-3.12 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 3.11)
  - Node.js 16+ –¥–ª—è Windows

{Colors.YELLOW}–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:{Colors.END}
  - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
  - Backend –ª–æ–≥–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ
  - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Ä—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
"""
        print(help_text)
    
    def run(self, args):
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –ª–∞—É–Ω—á–µ—Ä–∞"""
        self.print_banner()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if args.clean:
            self.clean_system()
            return
        
        if args.help:
            self.show_help()
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        if not self.check_dependencies():
            print(f"\n{Colors.RED}‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∑–∞–Ω–æ–≤–æ{Colors.END}")
            input(f"{Colors.YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...{Colors.END}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        venv_exists = (self.root_dir / 'venv').exists()
        node_modules_exists = (self.root_dir / 'sensor-app' / 'node_modules').exists()
        
        if not venv_exists or not node_modules_exists:
            print(f"\n{Colors.YELLOW}üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–µ—Ä–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏{Colors.END}")
            if not self.install_dependencies():
                input(f"{Colors.YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...{Colors.END}")
                return
        
        # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if self.start_application():
            self.wait_for_exit()
        else:
            input(f"{Colors.YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...{Colors.END}")

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É"""
    parser = argparse.ArgumentParser(
        description='MIMICS Launcher - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ª–∞—É–Ω—á–µ—Ä –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∏–º–∏—Ç–∞—Ü–∏–∏ –¥–∞—Ç—á–∏–∫–æ–≤ (Windows)',
        add_help=False  # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å–ø—Ä–∞–≤–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ—é
    )
    parser.add_argument('--clean', action='store_true', 
                       help='–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã (—É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –¥–∞–Ω–Ω—ã—Ö)')
    parser.add_argument('--help', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É')
    
    args = parser.parse_args()
    
    launcher = MimicsLauncher()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    def signal_handler(sig, frame):
        launcher.stop_application()
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    launcher.run(args)

if __name__ == '__main__':
    main()